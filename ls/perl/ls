#!/usr/bin/env perl 

use strict;
use warnings;
use Term::ANSIColor;
use 5.010;

my $dir = '.';
my $format = 'w';

my $arg;
my @in_argv;
foreach $arg ( @ARGV ) {
    if( $arg =~ /^-/ ) {
        if( $arg =~ /^-l$/ ) {
            if ($format eq 'a') {
                $format = 'la';
            }
            else {
                $format = 'l';
            }
        }
        elsif( $arg =~ /^-a$/ ) {
            if ($format eq 'l') {
                $format = 'la';
            }
            else {
                $format = 'a';
            }
        }
        elsif ( $arg =~ /(la)|(al)/ ) {
            $format = 'la';
        }
    }
    else {
        push( @in_argv, $arg );
    }

}

my $argv_count = 0;
my $argv_len = @in_argv;
if ($argv_len eq 0) {
        push( @in_argv, $dir );
}
foreach $arg (@in_argv) {
    print "$arg:\n" if ($argv_len > 1 && (-d $arg));
    $dir = $arg;

    my $len = 0;
    my %files;
    my @file;
    my $f;

    (-d $dir) ? opendir DIR, $dir :
    (-f $dir) ? push ( @file, $dir ) :
    die "ls: $dir에 접근할 수 없습니다.: $!\n";
#opendir DIR, $dir or die "ls: $dir에 접근할 수 없습니다.: $!\n";

    if ( -d $dir ) {
        foreach( readdir(DIR) ) {
            push ( @file, $_ );
            $f = "$dir/$_";
            my( $size, $mtime ) = ( stat($f) )[7,9];
            $files{$_} = [ $size, $mtime ];

            ($len = length) if ( length($_) > $len );
        }
        closedir DIR;
    }
    elsif ( -f $dir ) {
        $f = "$dir";
        my( $size, $mtime ) = ( stat($f) )[7,9];
        $files{$f} = [ $size, $mtime ];

        $len = length ($f);
    }

    my $width = 0;
    my $nlink_len = 0;
    my $file_len = 0;
    my $uid_len = 0;
    my $gid_len = 0;
    my $colCount = 0;
    my $size_full = 0;
    my $complete_dir;


    foreach $f ( sort keys %files ) {
        $complete_dir = "$dir/$f";
        if ( -f $f ) {
            $complete_dir = "$f";
        }
        my ( $dev, $inode, $mode, $nlink, $uid, $gid, $rdev, $size, $atime,
                $mtime, $ctime, $blksize, $blocks) = stat(
                    "$complete_dir" );
        my $name_uid = getpwuid ( $uid );
        my $name_gid = getpwuid ( $gid );

        $nlink_len = length( $nlink ) if $nlink_len < length( $nlink );
        $uid_len = length( $name_uid ) if $uid_len < length( $name_uid );
        $gid_len = length( $name_gid ) if $gid_len < length( $name_gid );

        if ( $format =~ /a/ ) {
            if ( $size eq 0 ) {
                $size_full += 0; 
            }
            elsif ( 0 < $size && $size <= 4096 ) {
                $size_full += 4; 
            }
            else {
                my $quoti;  # 몫
                my $extra;  #나머지
                $quoti = int ($size / $blksize);
                $extra = $size % $blksize;

                if ($extra) {
                    $size_full += ($quoti * 4) + 4; 
                }
                else {
                    $size_full += ($quoti * 4); 
                }
            }
        }
        else {
            if ( $f =~ /^[^.]/) {
                if ( 0 < $size && $size <= 4096 ) {
                    $size_full += 4; 
                }
                else {
                    my $quoti;  #몫
                    my $extra;  #나머지
                    $quoti = int ($size / $blksize);
                    $extra = $size % $blksize;

                    if ($extra) {
                        $size_full += ($quoti * 4) + 4; 
                    }
                    else {
                        $size_full += ($quoti * 4); 
                    }
                }
            }
        }

        if ( $format =~ /a/ ) {
            $file_len = length( $files{$f}->[0] ) if $file_len < length( $files{$f}->[0] );
        }
        else {
            if ( $f =~ /^[^.]/) {
                $file_len = length( $files{$f}->[0] ) if $file_len < length( $files{$f}->[0] );
            }
        }
    }
    print "합계 $size_full\n" if ($format =~ /l/ && (-d $dir));


    foreach $f ( sort keys %files ) {
        $complete_dir = "$dir/$f";
        if ( -f $f ) {
            $complete_dir = "$f";
        }

        my ( $dev, $inode, $mode, $nlink, $uid, $gid, $rdev, $size, $atime,
                $mtime, $ctime, $blksize, $blocks) = stat( "$complete_dir" );
        my $name_uid = getpwuid ( $uid );
        my $name_gid = getpwuid ( $gid );
        my( $sec, $min, $hour, $mday, $mon, $year ) = localtime(
                $files{$f}->[1] );
        $mode = sprintf "%o", $mode & 07777;
        my @mode_print;

        if (-d "$complete_dir") {
            push( @mode_print, "d" )
        }
        else {
            push( @mode_print, "-" );
        }

        push (@mode_print, cat_mode($mode));

        if( $format eq 'l' ) {
            $width = length( $f );
            if ( $f =~ /^[^.]/) {
                printf "%s%s%s%s ", @mode_print;
                printf "%${nlink_len}d ", $nlink;
                printf "%-${uid_len}s ", $name_uid;
                printf "%-${gid_len}s ", $name_gid;
                printf "%${file_len}d ", $files{$f}->[0];
                printf "%04d-%02d-%02d %02d:%02d ",
                       $year+1900, $mon+1, $mday, $hour, $min;

                if ( -d $f ) {
                    printf "%-${width}s\n", $f; 
                }
                else {
                    printf "%-${width}s\n", $f; 
                }
            }
        }
        elsif ( $format eq 'a' ) {
            $width = length( $f );
            if ( -d $f ) {
                printf "%-${width}s\n", $f; 
            }
            else {
                printf "%-${width}s\n", $f; 
            }
        }
        elsif ( $format eq 'la' ){
            $width = length( $f );
            printf "%s%s%s%s ", @mode_print;
            printf "%${nlink_len}d ", $nlink;
            printf "%-${uid_len}s ", $name_uid;
            printf "%-${gid_len}s ", $name_gid;
            printf "%${file_len}d ", $files{$f}->[0];
            printf "%04d-%02d-%02d %02d:%02d ",
                   $year+1900, $mon+1, $mday, $hour, $min;

            if ( -d $f ) {
                printf "%-${width}s\n", $f; 
            }
            else {
                printf "%-${width}s\n", $f; 
            }
        }
        else {
            $width = length( $f );
            if ( $f =~ /^[^.]/)
            {
                if ( -d $f ) {
                    printf "%-${width}s\n", $f; 
                }
                else {
                printf "%-${width}s\n", $f; 
                }
            }
        }
    }

    print "\n" unless ($argv_count eq $#in_argv);
    $argv_count++;
}

sub cat_mode {
    my @buf_mode;
    my $buf = shift;

    for ($buf =~ /\d{1,1}/g){
        if ($_ == 1) {
            push( @buf_mode, "--x" );
        }
        elsif ($_ == 2) {
            push( @buf_mode, "-w-" );
        }
        elsif ($_ == 3) {
            push( @buf_mode, "-wx" );
        }
        elsif ($_ == 4) {
            push( @buf_mode, "r--");
        }
        elsif ($_ == 5) {
            push( @buf_mode, "r-x");
        }
        elsif ( $_ == 6) {
            push( @buf_mode, "rw-");
        }
        elsif ($_ == 7) {
            push( @buf_mode, "rwx");
        }
        else
        {
            push( @buf_mode, "---");
        }
    }

    return @buf_mode;
}
